Spring in Action
- 오픈 소스 프레임워크
- 엔터프라이즈급 애플리케이션 개발의 복잡도를 해소하기 위해 만들어짐
- POJO 지향(순수 자바 코드)

Wiring(와이어링) - 애플리케이션 컴포넌트 간의 관계를 정하는 것
 - xml 이용
 - java 코드 이용

빈들이 정의된 곳 - context.xml 파일
 - ClassPathXmlApplicationContext() 사용
 - 자바기반 : AnnotationConfigApplicationContext 제공, 애플리케이션의 클래스패스에 있는 하나 이상의 xml 파일에서 스프링 컨텍스트를 로드


---------------------

 - Spring은 크게 DI(Dependency Injection)과 AOP(Aspect Oriented Programming)로 구성되어있다 보면 된다.

 - DI : 객체들이 상호 간의 종속관계나 구체적인 구현 방법을 알 필요가 없도록, 클래스 사이의 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동적으로 연결해주는 것
 - 개발자는 제어를 담당할 필요없이 빈 설정 파일에 의존관계가 필요하다는 정보만 추가한다.
 - 오브젝트 레퍼런스를 외부(Container)로부터 주입 받아서, 실행 시에 동적으로 의존관계가 생성
 - 컨테이너가 흐름의 주체가 되어 애플리케이션 코드에 의존관계를 주입(IoC(Inversion of Control):제어의 역전)

 - 보통 프로그램의 코드를 작성하면, 그 프로그램의 흐름을 제어하는 주체는 코드이다. 
 - 프레임워크를 사용하여 프로그램을 만들 경우 프레임워크가 흐름을 제어하는 주체가 되어, 필요시 코드를 호출하여 사용
 - 프레임워크에서 흐름의 제어권을 가진 것이 컨테이너(Container)이다. 제어권을 개발자로부터 컨테이너로 넘어가 객체 생성부터 생명주기 관리까지 컨테이너가 제어한다. 
 - 이런 제어권의 흐름이 바뀌는 것을 흔하게 들어본 IoC(Inversion of Control: 제어의 역전)라 부른다.

 - 간단한 예제를 보자

 - IoC/Di가 적용되지 않은 코드와 적용된 코드를 비교하면
 - 먼저 IoC/Di가 적용되지 않은 코드

// IoC/DI 미적용
#House.java
public class House {
	private Room room;
	
	public House() {
		// 동적으로 클래스 정의 불가
		room = (Room) new BlackRoom();
	}
}
interface Room {
	
}
class BlackRoom {
	
}

 - 동적으로 클래스 정의 불가

 - 적용된 코드
#xx.xml
<bean id = "room" class = "com.daumsoft.di.BlackRoom">
	
</bean>
<bean id = "House2" class = "com.daumsoft.di.House2">
	<property name="room" ref="room"></property>
</bean>

#House2.java 

public class House2 {
	private Room room;
	public void setRoom(Room room){
		this.room = room;
	}
}
 - 컨테이너에 사용할 객체들을 등록
 - 코드에서 setRoom에 매개변수로 room을 받아와 실행 시, 동적으로 의존관계 설정
 - Room 인터페이스의 구현체 클래스인 BlackRoom이 등장하지 않아 동적으로 구현 클래스를 정의할 수 있다.

 - 결론, IoC/DI를 사용시 객체 생성할 때, 해당 객체가 참조한 다른 객체에 종속된 코드를 외부(Container)에 설정함으로써, 커플링을 낮추면서 유연성과 확장성을 향상

 - IoC/DI가 자바의 표준 프로그래밍 모델로 발전하면서 다양한 종류의 IoC/DI 프레임워크들이 등장
 - 독보적인 프레임워크 Spring : 이유는 융연하고 강력한 기능, 다양한 컨테이너 사용

 - 일단, container, bean, xml... 등이 나타나는데, 정리해보면
 - xx.xml : AppicationContext라 부르며, 구성(Configuration)정보를 담아 정의해놓은 파일
 - AppicationContext, Configuration : 엔터프라이즈급 애플리케이션을 개발하는데 필요한 여러 가지 컨테이너(Container) 기능, 정보
 - Container : 빈(bean)들을 관리외에 다양한 일을 함, 빈 팩토리(Bean Factory)라고 부른다.
 - Bean, 빈 관리 : 앞에 보여준 xml 예제
 - 다시 정리하면 IoC/DI를 사용하기 위해 외부에서 객체간 종속된 코드를 정의 해주는데, 이것을 빈 설정(DI 설정)이라 부른다.
 - 이런 빈들을 관리하고, 그외에 다양한 일을 하는 것을 Container라 하며, 빈 팩토리(Bean Factory)라고 부른다(디자인 패턴 팩토리 패턴...)
 - 이런 컨테이너들은 모아 AppicationContext라 부르며, 그 AppicationContext 정보를 xml 파일에 정의 한다. (rootContext.xml, servlet-context.xml datasources.xml 등등)
